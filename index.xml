<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peter Grimshaw&#39;s Site</title>
    <link>https://pagrim.github.io/</link>
    <description>Recent posts from on Peter Grimshaw&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 20 Apr 2025 15:47:24 +0100</lastBuildDate><atom:link href="https://pagrim.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Patching - nothing to do with Pirates, but also Scary</title>
      <link>https://pagrim.github.io/post/patching-gotchas/</link>
      <pubDate>Sun, 20 Apr 2025 15:47:24 +0100</pubDate>
      
      <guid>https://pagrim.github.io/post/patching-gotchas/</guid>
      <description>&lt;p&gt;I always find patching one of the most difficult aspects of writing good code tests, so I wanted to share some tips and tricks on patching and some particular &amp;lsquo;gotchas&amp;rsquo; that can be confusing to deal with.&lt;/p&gt;
&lt;h1 id=&#34;what-is-patching-why-would-i-want-to-do-this&#34;&gt;What is patching? Why would I want to do this?&lt;/h1&gt;
&lt;p&gt;When we write tests, we might call &lt;em&gt;function a&lt;/em&gt; which calls some other &lt;em&gt;function b&lt;/em&gt;, and we don&amp;rsquo;t necessarily want to test the correctness of &lt;em&gt;function b&lt;/em&gt; or call &lt;em&gt;function b&lt;/em&gt; at all. So we change the behaviour of the code such that when &lt;em&gt;function a&lt;/em&gt; is executed it doesn&amp;rsquo;t call &lt;em&gt;function b&lt;/em&gt;, it returns a mock object. Furthermore, we might specify what the mock object returns to help our testing. In some circumstances we might be able to achieve this using a mock object, but sometimes this is not possible and we need to somehow be able to change the behaviour of code without being able to pass mock objects into the tested function, and this is what we call patching.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give some examples below, with code and tests written in python, using the pytest framework to execute tests and with patchers and mocks from the python standard library package unittest. Although these are written for pytest and unittest, the examples can be applied to testing frameworks written in other languages. All the code examples used are &lt;a href=&#34;https://github.com/pagrim/testing-examples&#34;&gt;available on github&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;mock-example&#34;&gt;Mock Example&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to test the &lt;code&gt;write_temperature&lt;/code&gt; function.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def write_temperature(service: WeatherService, city):
    temp = service.get_temperature(city)
    return f&amp;#34;The temperature in {city} is {temp}°C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see the function that uses a weather service object passed as an argument and calls the &lt;code&gt;get_temperature&lt;/code&gt; method of this object. So, how can we test this? We can create a mock object to represent the service so that we don&amp;rsquo;t call the method from the real object.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def test_write_temperature_mock():
    mock_ws = Mock()
    mock_ws.get_temperature.return_value = 16.1
    assert write_temperature(mock_ws, &amp;#34;Example city&amp;#34;) == f&amp;#34;The temperature in Example city is 16.1°C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are using a mock object called &lt;code&gt;mock_ws&lt;/code&gt; and setting the return value of its &lt;code&gt;get_temperature&lt;/code&gt; method, then making an assertion about the expected return value.&lt;/p&gt;
&lt;h1 id=&#34;patching-example&#34;&gt;Patching Example&lt;/h1&gt;
&lt;p&gt;Now let&amp;rsquo;s say we want to test the get_temperature method. We don&amp;rsquo;t want to call the real &lt;code&gt;_fetch_weather&lt;/code&gt; method, but we have no obvious way to pass a mock object, so this is a good case for patching.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def get_temperature(self, city):
    raw_data = self._fetch_weather(city)
    return raw_data[&amp;#39;temperature&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the test, we need to handle the _fetch_weather method, because we don&amp;rsquo;t want to run the real method which might invoke external API calls and make our test complex. So we could write a test like below.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@patch(&amp;#34;weather.example.WeatherService._fetch_weather&amp;#34;)
def test_get_temperature(mock_fetch):
    ws = WeatherService()
    mock_fetch.return_value = {&amp;#39;temperature&amp;#39;: 16.1}
    assert ws.get_temperature(ws) == 16.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, what&amp;rsquo;s going on here? We are using the &lt;code&gt;@patch&lt;/code&gt; decorator to change the behaviour of the patched function at test run time; We are telling the test to return the dictionary &lt;code&gt;{&#39;temperature&#39;: 16.1}&lt;/code&gt; instead of running the real function.&lt;/p&gt;
&lt;p&gt;For patching with Python, the built-in unit test library provides a helpful set of patchers. Personally I prefer to use them as decorators since this keeps the code looking a bit tidier, but you can also use them as context managers (i.e. using a &lt;code&gt;with&lt;/code&gt; statement).&lt;/p&gt;
&lt;h1 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h1&gt;
&lt;p&gt;As mentioned at the start of this post, I think patching can be tricky to implement correctly. You&amp;rsquo;re changing the behaviour of code at runtime, and sometimes that&amp;rsquo;s difficult to reason with. Here are some examples of patching that are more difficult to make sense of.&lt;/p&gt;
&lt;h2 id=&#34;1-patching-at-the-wrong-time&#34;&gt;1. Patching at the Wrong Time&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to patch the &lt;code&gt;choose_base_url&lt;/code&gt; method of our WeatherService, to test that the &lt;code&gt;base_url&lt;/code&gt; attribute is really being set correctly in the constructor. In this example the constructor is simple, but you can imagine that there might be a more complex examples where a test for this would be very helpful.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class WeatherService:
    def __init__(self, base_url=None):
        self.default_url = &amp;#34;https://example.weather.api&amp;#34;
        self.base_url = self.choose_base_url(base_url)

    def choose_base_url(self, base_url):
        if base_url is None:
            return self.default_url
        return base_url
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s say we write a test like this.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def test_choose_base_url():
    service = WeatherService()
    with patch.object(WeatherService, &amp;#39;choose_base_url&amp;#39;, return_value=&amp;#34;test-url&amp;#34;):
        assert service.base_url == &amp;#34;test-url&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s talk through what is happening here. We are creating a &lt;code&gt;WeatherService&lt;/code&gt; object called &lt;code&gt;service&lt;/code&gt;. Then we are patching the &lt;code&gt;WeatherService&lt;/code&gt; class and telling the code to return the value &lt;code&gt;test-url&lt;/code&gt; at runtime. So it seems like what should happen at runtime is that the mock object is used instead of the real object and our assertion should pass since it checks that the &lt;code&gt;base_url&lt;/code&gt; of the mock object is set to the value we specified.&lt;/p&gt;
&lt;p&gt;If you try running this test, it will fail, and it might not be obvious why. The source of the issue is that the  &lt;code&gt;WeatherService&lt;/code&gt; object is instantiated before it is patched, so the &lt;code&gt;patch.object&lt;/code&gt; statement actually has no effect. The mock object has its attribute changed, but When we run the final assertion, the &lt;code&gt;service&lt;/code&gt; object to being referred to is the &lt;em&gt;real one, not the mock one&lt;/em&gt;. If we move the line &lt;code&gt;service = WeatherService()&lt;/code&gt; after the patch, we get the intended behaviour and the test will pass.&lt;/p&gt;
&lt;p&gt;Another version of this timing issue is changing the mock object after the tested function has been called, &lt;a href=&#34;https://github.com/pagrim/testing-examples/blob/main/test/weather/test_example.py#L25&#34;&gt;like this example&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-patching-the-class-not-an-instance&#34;&gt;2. Patching the class, not an Instance&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to test this method.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def write_paris_temperature():
    ws = WeatherService()
    return write_temperature(ws, &amp;#39;Paris&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We write a test like this&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@patch(&amp;#34;weather.example.WeatherService&amp;#34;, autospec=True)
def test_patch_class_but_real_instance_used(mock_service):
    mock_service.get_temperature.return_value = 18
    assert write_paris_temperature() == &amp;#34;The temperature in Paris is 18°C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the test, it fails, showing that the actual value returned is a MagicMock. This is confusing because it seems like we have patched the class and set the return value of its &lt;code&gt;get_temperature&lt;/code&gt; method. So, what&amp;rsquo;s going on here? We are patching the weather service class with a mock object called &lt;code&gt;mock_service&lt;/code&gt;, so when the class constructor is called, that mock returns another mock, and it&amp;rsquo;s the &lt;code&gt;get_temperature&lt;/code&gt; method of this other mock that is called.&lt;/p&gt;
&lt;p&gt;The example below which shows a direct fix for this issue.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@patch(&amp;#34;weather.example.WeatherService&amp;#34;, autospec=True)
def test_patch_class_mock(mock_service):
    mock_ws = Mock()
    mock_ws.get_temperature.return_value = 18
    mock_service.return_value = mock_ws
    assert write_paris_temperature() == &amp;#34;The temperature in Paris is 18°C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, the weather Service class is still mocked by the &lt;code&gt;mock_service&lt;/code&gt; object, but We have created a new mock which will be returned by the class constructor and so the test passes. You might think this seems a bit complicated. I always find when something seems a bit complicated it&amp;rsquo;s worth considering if it&amp;rsquo;s sensible. In this case, there is an easier way to deal with this if we have access to the &lt;code&gt;WeatherService&lt;/code&gt; class; we can do the same thing more easily with &lt;code&gt;patch.object&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@patch.object(WeatherService, &amp;#39;get_temperature&amp;#39;, autospec=True, return_value=18)
def test_patch_class_mock_object():
    assert write_paris_temperature() == &amp;#34;The temperature in Paris is 18°C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;So, in this post, we have looked at how to replace real code with a mock object in a test. We saw that in some circumstances this is not possible and we need to use patching instead. We saw that this can be tricky to implement correctly and looked at two common issues, firstly, patching at the wrong time, and secondly, patching the class instead of an instance of the class.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for now. Happy testing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Expectation Effect</title>
      <link>https://pagrim.github.io/post/expectation-effect/</link>
      <pubDate>Mon, 30 Dec 2024 14:18:42 +0000</pubDate>
      
      <guid>https://pagrim.github.io/post/expectation-effect/</guid>
      <description>&lt;p&gt;The Expectation Effect is one of the best books I&amp;rsquo;ve read this year. In this post I&amp;rsquo;ll give an overview of the message and explain why I think it contains such mind-blowing content.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-expectation-effect&#34;&gt;What is the Expectation Effect?&lt;/h2&gt;
&lt;p&gt;Most of us know, on some level, that our expectations can impact events in our lives positively or negatively. I think what this book illuminates so clearly is that this effect is widespread and can change outcomes dramatically. It&amp;rsquo;s clear that the relationship between the mind and body goes far beyond what is commonly understood by society.&lt;/p&gt;
&lt;p&gt;Simply put, the &lt;em&gt;Expectation Effect&lt;/em&gt; describes positive expectations resulting in positive outcomes or vice versa. The reality is more nuanced than this. In the book Robson gives a tour of areas where we can see the effect of positive or negative expectations. There are plenty of self-help books that talk about similar positive mindset concepts, such as &lt;em&gt;manifestation&lt;/em&gt; and &lt;em&gt;visualisation&lt;/em&gt;, but where this books differentiates itself is the reference to scientific studies explaining these effects and the level of detail provided.&lt;/p&gt;
&lt;h2 id=&#34;where-does-this-manifest-itself&#34;&gt;Where does this manifest itself?&lt;/h2&gt;
&lt;p&gt;One of the things most surprising about this effect was just how widespread it can be in life. The chapter that really got my attention was &lt;em&gt;The Food Paradox&lt;/em&gt; which talks about the effects of expectation on the feeling on being full. A study showed that labelling the same milkshake with more or less &amp;lsquo;filling&amp;rsquo; ingredients can change our perception of how full we are and in turn change the chemicals produced by the body. This study by Alia Crum at Yale and Arizona State universities showed that participants who drunk a milkshake with a description conveying &amp;lsquo;indulgent&amp;rsquo; felt more full than those who drunk one described as &amp;lsquo;healthy&amp;rsquo; even though both milkshakes were the same. Multiple similar studies are mentioned in the book, and the point is that our expectation about which foods are filling can impact our diet and health hugely. Those who consumed the &amp;lsquo;healthy&amp;rsquo; labelled milkshake went on to consume more calories later.&lt;/p&gt;
&lt;p&gt;Robson outlines other areas of life; education, business, health (including life expectancy) where expectation can have astounding effects.&lt;/p&gt;
&lt;p&gt;This effect can have a dramatic effect on outcomes. It&amp;rsquo;s not explicitly discussed in the book, but I think there can be an enormous cyclical feedback effect. For example, consider the case of children performing better in school due to teachers&amp;rsquo; higher expectations. Robson discusses the study by Goyer et at. in 2017 on improving academic attainment of black children through self-affirmation at the start of the academic year. Robson notes that the effect on attainment can be seen years later. Self-affirmation has a positive effect on the children and improves their results. This, sooner or later, raises their expectation of positive results and the cycle strengthens again. As the book says, the initial change of mindset has a dramatic effect on outcomes, but I think there is also a cycle of feedback happening here.&lt;/p&gt;
&lt;h2 id=&#34;impacts-of-the-effect&#34;&gt;Impacts of the Effect&lt;/h2&gt;
&lt;p&gt;Two of the most interesting points are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Awareness of the effect doesn&amp;rsquo;t diminish it. For example someone taking a placebo pill may experience recovery from a condition, even if they are aware of the placebo, so long as they have the right mindset. Sports stars can benefit from performing rituals before a match which logically don&amp;rsquo;t seem to have any effect on their performance, even if they understand that logically the ritual should have no effect.&lt;/li&gt;
&lt;li&gt;Having a positive view of certain emotions can have a huge effect. We have a tendency in society to feel that we are wrong not to feel happiness or to feel anxiety and try to avoid these emotions. What Robson advocates is not to suppress such emotions, but to feel them and crucially to recognise their benefits. He cites examples of how anger can help athletes perform better and nerves can help students succeed in exams.
For me these two facts are like a beacon - they tell us that informing someone about this effect can perform better and have a more positive view of their own emotions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;For me the Expectation Effect illuminated that we behave according to expectation, often in ways that we may not realise. Moreover we have the power to change our own expectations to help us navigate life better. I expect that was illuminating and you&amp;rsquo;ll read this from cover to cover. Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualising Tensorflow Graphs</title>
      <link>https://pagrim.github.io/post/tensorflow-graphs/</link>
      <pubDate>Sat, 30 Nov 2024 12:22:29 +0000</pubDate>
      
      <guid>https://pagrim.github.io/post/tensorflow-graphs/</guid>
      <description>&lt;p&gt;Recently I was looking at a Triton Server tutorial which used the &lt;code&gt;tf2onnx&lt;/code&gt; utility for converting a tensorflow model to onnx format. Triton is a tool which serves ML models, such as those from the tensorflow framework. Triton has a tensorflow backend, but it doesn&amp;rsquo;t support models from tenorflow v1 like the EAST text detection model used in the tutorial, so it&amp;rsquo;s necessary to convert the model to onnx format to serve it with Triton.&lt;/p&gt;
&lt;p&gt;This got me wondering how does this work converting a model from one format to another, and especially, what are these inputs and outputs that you need to specify for the conversion utility? Links to the tutorial and the original paper are at the bottom of the page if you&amp;rsquo;re interested in exploring more.&lt;/p&gt;
&lt;h2 id=&#34;tf2onnx-example&#34;&gt;tf2onnx Example&lt;/h2&gt;
&lt;p&gt;This is the command used in the tutorial to convert the tensorflow model to onnx.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python -m tf2onnx.convert --input frozen_east_text_detection.pb --inputs &amp;#34;input_images:0&amp;#34; --outputs &amp;#34;feature_fusion/Conv_7/Sigmoid:0&amp;#34;,&amp;#34;feature_fusion/concat_3:0&amp;#34; --output detection.onnx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Firstly, let&amp;rsquo;s clear up what&amp;rsquo;s otherwise going on in the above command. The &lt;code&gt;tf2onnx.convert&lt;/code&gt; utility is being called, and the tenorflow model being converted is the pre-trained model stored in the &lt;code&gt;frozen_east_text_detection.pb&lt;/code&gt; file. That&amp;rsquo;s a protobuf file which stores the model graph and weights. The onnx format model is going to be stored at the &lt;code&gt;detection.onnx&lt;/code&gt; file location.&lt;/p&gt;
&lt;p&gt;I looked into the code and realised that these are nodes in the tensorflow model graph, so, for example &lt;code&gt;input_images:0&lt;/code&gt; relates to the first (0 index) node in the graph labelled as &lt;code&gt;input_images&lt;/code&gt;. Selecting inputs and outputs allows us to choose which parts of the model graph we would like to be converted to an onnx format.&lt;/p&gt;
&lt;p&gt;How can we see the model graph such that we could make such a choice? Tensorflow include a helpful model summary method which can be visualised in Tensorboard. Let&amp;rsquo;s download the tensorflow model &lt;a href=&#34;https://www.dropbox.com/s/r2ingd0l3zt8hxs/frozen_east_text_detection.tar.gz&#34;&gt;from dropbox here&lt;/a&gt; and unpack it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar -xvf frozen_east_text_detection.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;visualising-the-tf-model&#34;&gt;Visualising the TF Model&lt;/h2&gt;
&lt;p&gt;We can use this python code to use the &lt;code&gt;tf.summary.graph&lt;/code&gt; method which writes a summary of the graph using a &lt;code&gt;tf.summary.writer&lt;/code&gt;, which in this case writes to the &lt;code&gt;./logs&lt;/code&gt; directory. You&amp;rsquo;ll need a python runtime with tensorflow installed for this to work.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/pagrim/b750b4520222ddee35db47978b930c20.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s create the logs directory, run the code and then visualise with tensorboard.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir logs
python write_tf_graph.py frozen_east_text_detection.pb
tensorboard --logdir logs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This should start tensorboard as a local webserver running on &lt;code&gt;http://localhost:6006/&lt;/code&gt;. If you navigate to that address in your web browser you should be able to see the frozen east text detection model visualised as a graph in tensorboard.&lt;/p&gt;
&lt;p&gt;In the tensorboard UI, it&amp;rsquo;s easy to navigate the graph and search for the nodes, for example you can search for the node named &lt;code&gt;feature_fusion/Conv_7/Sigmoid&lt;/code&gt; and tensorboard will highlight this for you.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/tensorflow-graphs/imgs/tb_search.png&#34;
    alt=&#34;Search TF Graph&#34; width=&#34;300&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Search TF Graph in Tensorboard&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can quickly see that the model is composed of a feature extraction component (in this case resnet50) and a feature fusion component. From looking at the original paper and the tensorflow graph we can see that this node is in the output layer and produces the scores. It&amp;rsquo;s more difficult to see what the &lt;code&gt;feature_fusion/concat_3&lt;/code&gt; node is doing, but it seems to produce the geometry outputs according the triton tutorial and we can see from the graph that this is an output node.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/tensorflow-graphs/imgs/east_output_score_component.png&#34;
    alt=&#34;Output Component&#34; width=&#34;600&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Output component&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Here&amp;rsquo;s the &lt;a href=&#34;https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_1-model_deployment&#34;&gt;triton tutorial&lt;/a&gt; that sparked my interest&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re interested in a deep dive into the text detection model, here&amp;rsquo;s the &lt;a href=&#34;https://arxiv.org/pdf/1704.03155&#34;&gt;EAST text detection original paper&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Huffman Encoding</title>
      <link>https://pagrim.github.io/post/huffman-encoding/</link>
      <pubDate>Fri, 08 Nov 2024 16:01:13 +0000</pubDate>
      
      <guid>https://pagrim.github.io/post/huffman-encoding/</guid>
      <description>&lt;p&gt;Recently I joined an algorithms Meetup event, which was targeted at people studying for tech interviews. The event was really useful and it was interesting to hear other people&amp;rsquo;s perspectives, but this is not the main point of this post! This event is how I came across an algorithm I hadn&amp;rsquo;t heard of before called Huffman encoding. I&amp;rsquo;ve looked at quite a few coding interview questions but never heard of this algorithm so I started investigating a few days ago&amp;hellip;&lt;/p&gt;
&lt;p&gt;TLDR; Huffman encoding is a lossless encoding algorithm, meaning you can encode and decode text without losing any information. Personally I think it&amp;rsquo;s unlikely to come up in any kind of interview you do, although I have seen someone was unfortunate enough to be asked a Huffman question in a &lt;a href=&#34;https://leetcode.com/discuss/interview-question/416316/google-onsite-software-engineer-huffman-coding-algorithm&#34;&gt;Google interview&lt;/a&gt; and it&amp;rsquo;s probably useful knowledge.&lt;/p&gt;
&lt;p&gt;Huffman encoding is a prefix algorithm meaning that no encoded value is a prefix of another encoded value. Why is this useful? It means that you can encode your text in variable length values without any delimiters and still be certain about the meaning. For example, let&amp;rsquo;s say we encode our text as &lt;code&gt;a=0, b=1, c=10&lt;/code&gt;. Now when the value &lt;code&gt;10&lt;/code&gt; is being decoded, we&amp;rsquo;re not sure how to decode this, it could be &lt;code&gt;ba&lt;/code&gt; or it could be &lt;code&gt;c&lt;/code&gt;, on the other hand if we encode our text as &lt;code&gt;a=10, b=11, c=0&lt;/code&gt; then we have no doubt that &lt;code&gt;1110&lt;/code&gt; should be decoded as &lt;code&gt;ba&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Variations of this are used in compression algorithms and image codecs &lt;a href=&#34;https://en.wikipedia.org/wiki/Huffman_coding#Applications&#34;&gt;according to Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;ll explain the idea of the Huffman algorithm by walking through an example and share my implementation. I found it helpful to explain the ideas in a blog post and I hope someone might find the explanation useful!&lt;/p&gt;
&lt;h2 id=&#34;prerequisite-knowledge&#34;&gt;Prerequisite Knowledge&lt;/h2&gt;
&lt;p&gt;It helps here if you understand a MinHeap and a Binary Tree. For this it&amp;rsquo;s enough to know that a MinHeap is a structure which returns us the minimum value of the heap.&lt;/p&gt;
&lt;h1 id=&#34;the-idea&#34;&gt;The Idea&lt;/h1&gt;
&lt;p&gt;The idea of the algorithm is to create a Huffman tree, which is a binary tree where the leaves correspond to one character to be encoded. We encode the path from root to leaf using the convention that each left move is &amp;lsquo;0&amp;rsquo; and each right move &amp;lsquo;1&amp;rsquo;. This helps us achieve the prefix effect, because it means that no character is an ancestor of any other (because the characters are all leaves). We create other &amp;lsquo;internal nodes&amp;rsquo; for the non-leaf nodes. The input to the algorithm is a set of character frequencies.&lt;/p&gt;
&lt;p&gt;We use a MinHeap to store the frequencies and the characters to be encoded, and take the smallest frequencies first so that the most frequent characters are encoded nearer the top of the tree.&lt;/p&gt;
&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s go through an example. First let&amp;rsquo;s look at the input frequencies:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;character   Frequency
    a           5
    b           9
    c           12
    d           13
    e           16
    f           45
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example source: &lt;a href=&#34;https://www.geeksforgeeks.org/huffman-coding-greedy-algo-3/&#34;&gt;GeeksforGeeks&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;initialisation&#34;&gt;Initialisation&lt;/h2&gt;
&lt;p&gt;Remember, we are building a tree but we&amp;rsquo;re going to do this in a way that&amp;rsquo;s not obvious. To start with each of these characters and its frequency is in a MinHeap. They each will be a node in a tree but we haven&amp;rsquo;t yet defined the positions in the tree. I&amp;rsquo;m going to represent them as a Huffman Node (HN) object &lt;code&gt;HN(char, freq, left, right)&lt;/code&gt; where the left and right attributes might not be present initially.&lt;/p&gt;
&lt;p&gt;We create a MinHeap with these initial characters and frequencies, so we have &lt;code&gt;HN(a, 5), HN(b, 9), HN(c, 12)&lt;/code&gt; etc, so there are 7 HN&amp;rsquo;s in our MinHeap to start with.&lt;/p&gt;
&lt;h2 id=&#34;iterations-of-building-the-tree&#34;&gt;Iterations of Building the Tree&lt;/h2&gt;
&lt;p&gt;In each iteration we pop the two smallest frequencies from the MinHeap, so in our very first iteration that&amp;rsquo;s &lt;code&gt;HN(a, 5)&lt;/code&gt; and &lt;code&gt;HN(b, 9)&lt;/code&gt;. We combine the sum of the frequencies into a new object, call it &lt;code&gt;n1&lt;/code&gt;. Additionally we set the smallest of our two popped nodes as the left and the largest as the right. So we create a new object &lt;code&gt;HN(n1, 14, left=HN(a, 5), right=HN(b, 9))&lt;/code&gt; and push it back to the MinHeap. Maybe you can see the idea for how we are implicitly building the tree.&lt;/p&gt;
&lt;p&gt;We repeat this process, in the second iteration combining &lt;code&gt;HN(c, 12)&lt;/code&gt; and &lt;code&gt;HN(d, 13)&lt;/code&gt; into &lt;code&gt;HN(25, n2, left=HN(c, 12), right=HN(d, 13))&lt;/code&gt;. We continue doing this, also combining any of the new &amp;rsquo;n&amp;rsquo; tuples.&lt;/p&gt;
&lt;p&gt;Eventually, there will only be one node left, this will be the root of our tree. So, you can see that in each iteration we are building &amp;lsquo;mini-trees&amp;rsquo; of three nodes and the parent node is pushed to the MinHeap so that it will later become a child node elsewhere.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/huffman-encoding/imgs/graph.png&#34;
    alt=&#34;Example Tree&#34; width=&#34;600&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Example Tree&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;encoding-characters&#34;&gt;Encoding Characters&lt;/h2&gt;
&lt;p&gt;So we have built a Huffman tree, but how do we actually encode the nodes? We need to traverse the tree from the root to each node recursively, whilst recording each step of the path as &amp;lsquo;0&amp;rsquo; or &amp;lsquo;1&amp;rsquo; as mentioned above. For example, in the above tree we go right, left, left to reach the &lt;code&gt;c&lt;/code&gt; character, so &lt;code&gt;c&lt;/code&gt; will be encoded as &lt;code&gt;100&lt;/code&gt;. It&amp;rsquo;s helpful to store each of the node&amp;rsquo;s encodings so that when we iterate through a text it&amp;rsquo;s fast to retrieve the encoding.&lt;/p&gt;
&lt;h2 id=&#34;decoding-encoded-text&#34;&gt;Decoding Encoded Text&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s say we receive some encoded text such as &lt;code&gt;11001101100&lt;/code&gt;, how do we decode this? We iterate through the text, traversing the tree until we reach a leaf. So, for example we start at the root and see &lt;code&gt;1&lt;/code&gt;, so we move right and so on until we see that &lt;code&gt;1100&lt;/code&gt; corresponds to &amp;lsquo;a&amp;rsquo;. Now we move to the next character of the encoded text and start again at the root, noticing that &lt;code&gt;1101&lt;/code&gt; corresponds to &amp;lsquo;b&amp;rsquo; and finally &lt;code&gt;100&lt;/code&gt; means &amp;lsquo;c&amp;rsquo;, so we have decoded the text as &amp;lsquo;abc&amp;rsquo;.&lt;/p&gt;
&lt;h1 id=&#34;implementation&#34;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;To implement the algorithm I used two classes, &lt;code&gt;HuffmanEncoder&lt;/code&gt; and &lt;code&gt;HuffmanNode&lt;/code&gt;. The methods in &lt;code&gt;HuffmanEncoder&lt;/code&gt; correspond to the paragraphs above, so the &lt;code&gt;_build_tree&lt;/code&gt; method initialises the MinHeap and builds the tree, returning the root. The &lt;code&gt;_encode_tree&lt;/code&gt; method adds the encodings to each node as an attribute. The &lt;code&gt;decode&lt;/code&gt; method traverses the tree to decode an encoded string.
&lt;script src=&#34;https://gist.github.com/pagrim/92062363838812bad39fe2fb393c3158.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h2 id=&#34;further-info-and-conclusion&#34;&gt;Further info and Conclusion&lt;/h2&gt;
&lt;p&gt;You can see the complete code, plus some tests and the code to generate the graph image above in &lt;a href=&#34;https://github.com/pagrim/algorithms&#34;&gt;this github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for now, I hope you got something from this exploration of the Huffman algorithm! Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One Person, Two Wheels and a Tent</title>
      <link>https://pagrim.github.io/post/bike-tour/</link>
      <pubDate>Sun, 11 Aug 2024 18:25:09 +0100</pubDate>
      
      <guid>https://pagrim.github.io/post/bike-tour/</guid>
      <description>&lt;p&gt;The last couple of months I have been planning a bike tour, and I just came back from the ride so I wanted to write about the whole experience!&lt;/p&gt;
&lt;h2 id=&#34;planning-and-preparation&#34;&gt;Planning and Preparation&lt;/h2&gt;
&lt;p&gt;I have done a bike tour previously with an old-school touring bike, but that time I booked accommodation each night (a.k.a credit-card touring). This time I wanted to carry my own gear. Depending on your perspective I made the task a lot harder for myself by deciding to sell that old-school touring bike as I didn&amp;rsquo;t like the feel of riding it. It was a nice-looking bike but for me the handlebars and the diameter of the handlebars felt too narrow. I decided to get a new and cooler gravel bike!&lt;/p&gt;
&lt;p&gt;It took me a while to get the bike, but it took quite a bit longer to kit it out appropriately for touring. I managed to source a good quality gravel bike (Kinesis Crosslight Pro 6) from ebay for quite a good price. At first I wasn&amp;rsquo;t sure if the bike sizing was good, so I did quite a bit of testing with that. After raising the saddle a couple of times and eventually deciding I didn&amp;rsquo;t need to mess with the handlebar height, I was happy the bike fitted. I knew I wanted to go off-road so the very smooth and narrow tyres already on the bike weren&amp;rsquo;t going to work. After speaking to most of the bike shops in our nearest high street and realising touring tyres might work better than gravel tyres, I bought two 35c Michelin touring tyres. The trickiest part of fitting those was getting the existing tubeless tyres off whilst not making an enormous mess. If you don&amp;rsquo;t know tubeless tyres normally have a (usually colourful) sealant inside which quickly seals any punctures on the tyre, which makes removing them quite messy.&lt;/p&gt;
&lt;p&gt;Aside from the bike and the tyres there were a few other things I needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A route. I adapted a route I found on Komoot app which was following with National Cycle route 4. The whole route is a bit longer than I wanted so I use Komoot&amp;rsquo;s route planner to create my own truncated version.&lt;/li&gt;
&lt;li&gt;Tent to sleep in. I got the OEX Phoexx II 2 man tent. You can see some reviews here, but for me this worked really well. It&amp;rsquo;s light and super easy to assemble.&lt;/li&gt;
&lt;li&gt;Shoes I could walk and ride in. I bought these Giro Privateer mountain bike shoes which looked pretty waterproof. They were very comfortable to wear all day and easy to walk around in. I haven&amp;rsquo;t tested how waterproof they are &amp;hellip; yet!&lt;/li&gt;
&lt;li&gt;Panniers to load gear into. I got these pannier bags from Amazon. I liked them mainly because they were waterproof and looked very durable. I can say even after 3 days of riding they really are very robust. They are not even slightly damaged after a tour in which the bike and panniers fell over twice and they hit a fair few plants on the canal paths.&lt;/li&gt;
&lt;li&gt;A frame bag or handlebar bag for small items. This last-minute purchase from Halfords worked really well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these took a while in various ways, but I&amp;rsquo;m quite happy with everything I planned!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/bike.jpg&#34;
    alt=&#34;The bike after adaptations&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;The final product after alterations&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;the-tour&#34;&gt;The Tour&lt;/h2&gt;
&lt;p&gt;My aim was to ride from home (West London) to Bath (south-west of the UK) following an adapted version of national cycle route four, which is about 140 miles in total. The route meandered around south London, roughly following the river Thames, before reaching Windsor, then wound towards Reading in a roundabout-fashion, before heading more directly West along the Kennet and Avon Canal. I camped overnight twice, once at Windsor and once around Pewsey in Wiltshire, which meant that the first and third days were around 40 miles while the second day was around 60 miles.&lt;/p&gt;
&lt;h3 id=&#34;day-1-west-london---maidenhead&#34;&gt;Day 1: West London - Maidenhead&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/starting.jpg&#34;
    alt=&#34;Starting out&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Starting out&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I was a bit nervous when starting as I had put lots of effort into planning! I had tested every part of it, but not all of it together. To use a software engineering analogy, I had run unit tests but no integration tests! In the end, I had no issues.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/kingston.jpg&#34;
    alt=&#34;Thames at Kingston&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;The river Thames at Kingston&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The route started out through some nice areas like Richmond Park and then joined the Thames at Kingston. It was pretty uneventful and pleasant until I encountered a steep lane that very quickly became steeper, narrower and rockier&amp;hellip; I tried battling my way up but unfortunately, the bike, the panniers and I eventually went tumbling into the side of the lane and my knee took a hit. Luckily I had everything I needed carry on (antisceptic wipe, dressing and some tape), so pushed the bike to the top of the hill and sorted out my wounds. I pedalled onwards at the top of the hill, gingerly at first. Nevertheless, I continued through Weybridge, Egham and Windsor and then around the rowing lake at Dorney reach until I was almost at Maidenhead. I was lucky to go through lots of beautiful areas on a very sunny day, including Richmond Park, and most places along the Thames but the nicest one was Windsor Great Park, which included an amazing view down to Windsor Castle from the Park along the Long Walk.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/windsor_castle.jpg&#34;
    alt=&#34;Windsor Castle from the Long Walk&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Windsor Castle from the Long Walk&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I realised on the first evening that I really loved the sense of freedom from carrying everything on a bike. Camping also gave me a sense of freedom and a bit of nostalgia since I hadn&amp;rsquo;t done that for such a long time! I stopped at Amerden Caravan Park, which had really great facilities including charging points and showers.&lt;/p&gt;
&lt;h3 id=&#34;day-2&#34;&gt;Day 2&lt;/h3&gt;
&lt;p&gt;I decided not to bring any cooking equipment with me. This did mean that couldn&amp;rsquo;t have any tea in the morning (very British problem), so I was happy to take a tea break in the centre of Reading where the Olympics was also being screened.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/reading.jpg&#34;
    alt=&#34;Olympics at Reading town centre&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Olympics at Reading town centre&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I knew this day would be quite a long ride, but it felt quite a bit shorter since I met a nice guy called Max, shortly after joining the Kennet and Avon canal at Reading. He had cycled from Germany through the Netherlands to the UK, and was making his way from Dover to Bristol, cycling much of this barefoot! We were heading the same way, so cycled together and over the next Day and a half, he told me about his experiences of cycling across Europe, including being threatened by a Dutch farmer when wild camping! He was an expert in bike mechanics and also really good at making friends.&lt;/p&gt;
&lt;p&gt;We stopped in Newbury for lunch, and then continued further down the Kennet and Avon canal past Hungerford and towards Burbage, near Pewsey, where we both camped that evening. The campsite was a really friendly environment and there was another group of cyclists there already whom I spoke to a bit too, plus a guy who seemed to have cycled everywhere in Europe and had some good advice to give.&lt;/p&gt;
&lt;p&gt;I was exhausted that evening, but happy to have met Max and other fellow bike tourers.&lt;/p&gt;
&lt;h3 id=&#34;day-3&#34;&gt;Day 3&lt;/h3&gt;
&lt;p&gt;I parted ways with Max in the morning as he planned to read and stay at the campsite a bit longer, after having some interesting discussions about the &lt;em&gt;Gewaltfreiekommunikation&lt;/em&gt; (violence-free communication) book he was reading, and also about cycling routes in Scotland guided by the guy who had cycled everywhere!&lt;/p&gt;
&lt;p&gt;I was happy that this day&amp;rsquo;s route was a bit less onerous. I made a stop in the morning at the &lt;a href=&#34;https://en.wikipedia.org/wiki/Caen_Hill_Locks&#34;&gt;Caen Hill locks&lt;/a&gt; near Devizes, which are 29 locks in a row. I was happy to be going downhill, uphill looked pretty hard work there!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/caen_hill.jpg&#34;
    alt=&#34;Near the top of Caen Hill Locks&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Near the top of Caen Hill Locks&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The route was extremely picturesque, helped by the very sunny weather again, passing through places like Bradford upon Avon, and the Dundas aqueduct, and then I knew I was getting close to my final destination when I reached a place called Bathampton.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/dundas_top.jpg&#34;
    alt=&#34;Dundas Aqueduct&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;At the top of Dundas Aqueduct&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/dundas_view.jpg&#34;
    alt=&#34;Dundas Aqueduct&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;View from Dundas Aqueduct&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Eventually I reached a point where the towpath started going in and out of quite narrow tunnels and more people appeared, which was difficult to negotiate with a bike loaded with luggage. Then I realised with surprise and happiness that I must be in the centre of Bath and actually I needed to find a way off the towpath towards the centre and my final destination. A few minutes later I was grateful to reach the pretty Pulteney Bridge in Bath&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/bridge.jpg&#34;
    alt=&#34;Pulteney Bridge at Bath&#34; width=&#34;400&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Pulteney Bridge at Bath&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Shortly afterwards I stopped for a celebratory smoothie opposite my final destination of Bath Spa train station (again, it was a very hot day), feeling elated to have completed my tour! Unfortunately I didn&amp;rsquo;t realise I some melted chocolate from a flapjack was still on my face from earlier in the day. I decided to post the picture here anyway as a complete representation of the moment!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://pagrim.github.io/post/bike-tour/imgs/smoothie.jpg&#34;
    alt=&#34;Smoothie opposite Bath Spa station&#34; width=&#34;400&#34;&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Setting up my Blog with Hugo</title>
      <link>https://pagrim.github.io/post/website_setup/</link>
      <pubDate>Thu, 04 Jul 2024 11:44:08 +0100</pubDate>
      
      <guid>https://pagrim.github.io/post/website_setup/</guid>
      <description>&lt;p&gt;Since I set up this site earlier this month I thought it would be nice to share my experience setting up this blog. Here’s how I did it using the &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo static site generator framework&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;why-hugo&#34;&gt;Why Hugo?&lt;/h1&gt;
&lt;p&gt;I was on the lookout for a way to get a blog site up and running, which met my criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple post creation&lt;/li&gt;
&lt;li&gt;Simple hosting solution&lt;/li&gt;
&lt;li&gt;Minimal HTML/CSS/front end dev&lt;/li&gt;
&lt;li&gt;Easy to include additional static pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After some research, I found that using Hugo to generate content and hosting on github pages was the perfect fit. Hugo is a powerful framework for creating static sites and blogs, requiring only some basic development skills. The only things you need to know for Hugo are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have these skills, getting started with Hugo is a simple. Of these, I think git is the main barrier, but anyone with a little git experience should be fine.&lt;/p&gt;
&lt;p&gt;If you have a github account you will easily be able to host your own blog via github pages, and it&amp;rsquo;s super simple to deploy.&lt;/p&gt;
&lt;h1 id=&#34;getting-started-with-hugo&#34;&gt;Getting Started with Hugo&lt;/h1&gt;
&lt;p&gt;How to set up the blog wasn’t immediately obvious, but it&amp;rsquo;s feasible to get everything up and running in a few hours.&lt;/p&gt;
&lt;p&gt;Hugo simplifies the process of creating a static site. The heavy lifting is done by the theme you choose, meaning you don’t need to code in Go, although I’d be happy to have a Go at that! ;)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that you need to choose a theme for your site. This has advantages because the theme handles all of the HTML/CSS stuff for you, but it also can impose some limitations, assuming you don&amp;rsquo;t want to go ahead and edit the theme. I chose &lt;a href=&#34;https://gitlab.com/avron/gruvhugo&#34;&gt;gruvhugo&lt;/a&gt; because I liked the look and it aligned with my requirements. It&amp;rsquo;s worth shopping around for a while; you can see &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;available themes here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main task is configuring the &lt;code&gt;hugo.toml&lt;/code&gt; file, which defines the settings and structure of your site. For a quick start, there’s an excellent &lt;a href=&#34;https://www.youtube.com/watch?v=LIFvgrRxdt4&#34;&gt;10-minute introduction&lt;/a&gt; to setting up a site with Hugo by Ryan Schachte.&lt;/p&gt;
&lt;h1 id=&#34;repository-set-up&#34;&gt;Repository Set Up&lt;/h1&gt;
&lt;p&gt;This is the part that sounds a little complex, so I&amp;rsquo;ll explain in a bit of detail here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to host your blog code in a repo, let&amp;rsquo;s call it &lt;code&gt;myblog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you want to take advantage of github pages for deployment and hosting you need to commit the static files generated by Hugo to the repo corresponding to your github pages. This repo needs to be named &lt;code&gt;username.github.io&lt;/code&gt;, so in my case &lt;code&gt;pagrim.github.io&lt;/code&gt;. This will also be the url of your blog.&lt;/li&gt;
&lt;li&gt;In order to make it easy to commit the static files, you can add your &lt;code&gt;username.github.io&lt;/code&gt; repo as a submodule of your &lt;code&gt;myblog&lt;/code&gt; repo at the &lt;code&gt;public&lt;/code&gt; directory. In other words, you&amp;rsquo;ll be running this command &lt;code&gt;git submodule add username.github.io public&lt;/code&gt;. The reason for choosing the &lt;code&gt;public&lt;/code&gt; directory is that this is where Hugo will store static files when you generate them (by default)&lt;/li&gt;
&lt;li&gt;The simplest way to add themes is often to add your theme &lt;code&gt;mytheme&lt;/code&gt; as a submodule of your &lt;code&gt;myblog&lt;/code&gt; repo, this time at the &lt;code&gt;themes/mytheme&lt;/code&gt; directory. As a side note, I did decide to amend the theme very slightly so I added a forked version of the theme on my own github and added that as the submodule. Of course, if you take the theme as-is, there&amp;rsquo;s no need for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially, I considered using Continuous Integration (CI) for deployment instead, but once I worked through the above setup everything was very smooth.&lt;/p&gt;
&lt;h1 id=&#34;local-development--writing&#34;&gt;Local Development &amp;amp; Writing&lt;/h1&gt;
&lt;p&gt;I made extensive use of Hugo’s local server to preview the end result of my site as I worked on it. This was incredibly helpful for ensuring everything looked and functioned as expected before publishing.&lt;/p&gt;
&lt;p&gt;I initially wrote this post as a series of bullet points and asked ChatGPT to turn those into full sentences, although I edited the output a lot before publishing. Based on this experiment it seems like a great way to remove the heavy-lifting of writing a long post but still ensuring the content reflects my personal opinions :)&lt;/p&gt;
&lt;h1 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h1&gt;
&lt;p&gt;I’m extremely happy with the final result of my blog site. Hugo made the process smooth and enjoyable. Whilst I might explore other options in the future to add more features or flexibility, the current setup is an excellent starting point.&lt;/p&gt;
&lt;p&gt;If you’re looking to create a blog site quickly and efficiently, I highly recommend giving Hugo a try. With its ease of use and powerful features, it’s a fantastic choice for anyone wanting to share their thoughts and experiences online.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Courage To Be Disliked</title>
      <link>https://pagrim.github.io/post/courage_to_be_disliked/</link>
      <pubDate>Thu, 06 Jun 2024 10:46:13 +0100</pubDate>
      
      <guid>https://pagrim.github.io/post/courage_to_be_disliked/</guid>
      <description>&lt;p&gt;I re-read &lt;a href=&#34;https://www.amazon.com/Courage-Be-Disliked-yourself-happiness/dp/1760630721&#34;&gt;The Courage to be Disliked&lt;/a&gt; recently and wanted to share some of the amazing insights I learned from it. The book is about a conversation between a philosopher and a youth, based on similar style texts written by Plato about dialogues with Socrates. The philosopher is a follower of the psychology of Alfred Adler, who is the least well known of the three giants of psychology; Freud, Jung and Adler.&lt;/p&gt;
&lt;p&gt;The dialogue takes place over five nights and each night the youth challenges the philosopher on his claims, starting with the claim that life is simple and the world is simple. Some of the claims are counterintuitive and seem outrageous at first, but the philosopher carefully explains each point.&lt;/p&gt;
&lt;p&gt;Here is a summary of the concepts which I found most interesting.&lt;/p&gt;
&lt;h2 id=&#34;we-are-free-to-choose-our-behaviour&#34;&gt;We are free to choose our behaviour&lt;/h2&gt;
&lt;p&gt;Society tends to think of cause and effect when it comes to behaviour. Aetiology describes this cause and effect where behaviour is attributed to past events, especially with respect to trauma. For example this boy is a shut-in who does not leave his room due to the treatment he received from his parents. On the other hand, Alfred Adler advocates the theory of teleology, which instead considers the goal someone is trying to achieve with their behaviour. For example, this boy is a shut-in because he wants on some level to be that way, because he can gain attention from his parents or punish them for their past treatment. You might wonder, why would someone want to be a shut-in, but Adler&amp;rsquo;s psychology is a psychology of courage. So, for example, it&amp;rsquo;s also easier for the boy to be a shut-in and continue behaving as he has done. He needs courage to break out of his situation.&lt;/p&gt;
&lt;p&gt;For me this is a fascinating idea because it&amp;rsquo;s contrary to what is widely believed (i.e. aetiology), and also hugely empowering. I think this idea alone makes reading the book worthwhile!&lt;/p&gt;
&lt;h2 id=&#34;all-problems-are-interpersonal-relationship-problems&#34;&gt;All Problems are Interpersonal Relationship Problems&lt;/h2&gt;
&lt;p&gt;All problems are sooner or later problems of relationships with other people, for example if we consider theoretically living without contact with other humans, we see a lot of issues would vanish. For example, feelings of inferiority only make sense within the context of other people. These feelings are subjective i.e. they exist because we perceive some inferiority compared to other people. Feelings of inferiority may not always be a bad thing, they may cause us to strive to improve. However, if we develop an inferiority complex, these feelings become problematic.&lt;/p&gt;
&lt;p&gt;This is, of course, quite a bold claim to say that all problems relate to interpersonal relationships, but I think there is a lot of truth in this. Certainly, if we look at the problems of a regular person in a developed country a lot of problems fall in this category.&lt;/p&gt;
&lt;h2 id=&#34;its-important-to-separate-your-tasks-from-mine&#34;&gt;It&amp;rsquo;s Important to Separate your Tasks from Mine&lt;/h2&gt;
&lt;p&gt;Since all (or many) problems relate to the relationship between two people, it&amp;rsquo;s important to consider what Adler calls life tasks. These exist in several core areas such as family, friends &amp;amp; romantic relationships. When we think about these it&amp;rsquo;s vital to consider the separation of tasks in any situation, so to be clear on which part of a task or tasks should be the responsibility of each person. For example, it&amp;rsquo;s the task of a child to do their homework. Nothing good will arise if the parent does the homework for the child. In fact the parent is taking the task away from the child whose responsibility it is, so the child will not learn and can&amp;rsquo;t take responsibility for their task. A key point is to discard the tasks of others&amp;rsquo; because we will feel a huge burden doing tasks which others should be responsible for.&lt;/p&gt;
&lt;p&gt;Here it&amp;rsquo;s relevant to think about the desire for recognition from others, which is very common. According to Adlerian psychology it is important to reject this as much as possible, because recognising you is a task for other people. Here a good analogy is leading a horse to water. We can strive for others to recognise us in the same way we lead the horse to water, but we cannot make others recognise us as we cannot make the horse drink. If we lead a life seeking recognition from others we will eventually end up living a life which is shackled to the desires of others.&lt;/p&gt;
&lt;h2 id=&#34;the-goal-of-interpersonal-relations-is-community-feeling&#34;&gt;The Goal of Interpersonal Relations is Community Feeling&lt;/h2&gt;
&lt;p&gt;Here Adler makes a very broad definition of community, which encompasses school, workplace, nation, or in fact any other living being. Adler believes that the goal of interpersonal relations is to develop community feeling. This is an interesting point because it feels like one’s goal is dependent on others, but it is the task of the individual to develop this feeling. In Adler’s approach the individual’s responsibility is to develop the feeling of contributing to others, regardless of how it is perceived by others. The philosopher and the youth go on to discuss horizontal relationships i.e. those where both parties feel on an equal footing. Adler advocates the approach of neither rebuking nor praising other people. Consider an adult praising a child for performing a task. Implicitly the adult is saying that they have a better measure of what is ‘good’ than the child. Conversely if the adult rebukes the child the same thing is implied. So this behaviour encourages vertical relationships. Instead of praising or rebuking Adler advocates encouragement. Consider the same example of a child performing a task, but the adult says ‘thanks’ to the child afterwards like they would to a friend. This conveys that the adult sees the child on an equal footing, and will also help the child to gain in confidence more than rebuke or praise. Hopefully it’s clear that this kind of approach will encourage community feeling. As a side note the term &amp;lsquo;community feeling&amp;rsquo; is a translation of the German &lt;em&gt;Gemeinschaftsgefühl&lt;/em&gt;, which is why it sounds a bit strange in English.&lt;/p&gt;
&lt;p&gt;This borders on the purpose of life question, but I think I can subscribe to the idea that we can derive happiness through the feeling of contribution. This goes back to the philosopher&amp;rsquo;s original point that life is simple and anyone has the power to achieve happiness if they wish.&lt;/p&gt;
&lt;h2 id=&#34;live-in-the-present&#34;&gt;Live in the Present&lt;/h2&gt;
&lt;p&gt;The are some interesting points made on this topic. The philosopher starts by explaining that excessive self-consciousness stifles the self. To avoid this he outlines three things we need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Self-acceptance&lt;/li&gt;
&lt;li&gt;Confidence in others&lt;/li&gt;
&lt;li&gt;Contribution to others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea is that if we can achieve all of these then we will be able to live freely. The philosopher goes on to explain that life is a series of moments. We tend to think of life as a continuous line, but if we look closely enough at any drawn line we will see it’s composed of small dots. The greatest life-lie is to spend time thinking about the future or the past. Instead we should shine a light on the present and live in the moment.Workaholism is also highlighted as a life-lie. Focussing on only one aspect, i.e. career to the exclusion of other aspects in Adlerian psychology is another way of avoiding tasks.&lt;/p&gt;
&lt;p&gt;One point that I really like is the courage to be normal. We see a lot of people striving to be special in some way. The philosopher points out that we can see this in children striving to be especially good or bad. It takes courage to accept that our lives can be normal. This is explained well in the book.&lt;/p&gt;
&lt;p&gt;I really like the concept of living in the present, which is the central message of mindfulness. This relates to the earlier concept of teleology too, so when we focus on the present we focus on exactly the point in time where we are able to make choices. Incidentally I would really recommend &lt;a href=&#34;https://www.amazon.com/10-Happier-10th-Anniversary-Works/dp/0063356473/&#34;&gt;10% Happier by Dan Harris&lt;/a&gt; as a way to find out about mindfulness in a really accessible format.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope you found some of those ideas as interesting as I did. Most of the topics above are both controversial on the surface but extremely valuable once you understand them properly. As with any ideas in the realm of psychology and self-development it&amp;rsquo;s good to apply a degree of skepticism and realise that they are one possibly framework to look at the world, but I think Adlerian psychology is one framework which for many  people would be really beneficial and for some completely life-changing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
